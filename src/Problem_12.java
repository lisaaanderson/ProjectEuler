/*
The sequence of triangle numbers is generated by adding the natural numbers. So the
7th triangle number would be 1+2+3+4+5+6+7=28. The first ten terms would be:
    1,3,6,10,15,21,28,36,45,55,...  formula to determine triangle numbers is
                                        n(n+1)/2 or n-sq+n/2
1: 1                                  7(7+1)/2=(7*8)/2=56/2=28
2: 2,3                            7-sq+7/2=(7*7+7)/2=(49+7)/2=56/2=28
3: 4,5,6
4: 7,8,9,10
5: 11,12,13,14,15
6: 16,17,18,19,20,21
7: 22,23,24,25,26,27,28

Let us list the factors of the first seven triangle numbers:
1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors? = 76576500
 */
public class Problem_12 {

    public static void main(String[] args) {
        // Variable to hold the triangle values
        long triNum = 0;
        boolean continueLoop = true;
        // calculate the triangle value
        for (int i = 1; continueLoop; i++){
            triNum = i * (i + 1) / 2;
        //    System.out.println("triNum = " + triNum + " i = " + i);
            if (countFactors(triNum) > 500){
                continueLoop = false;
            }
    //        System.out.println("Count = " + countFactors(triNum));
        }
        System.out.println("The first Triangle Number with 500 or more factors is " + triNum);
    }

    // method to determine how many factors are in a given value
    public static long countFactors(long n){
        int count = 0;
        for (int i = 1; i <= Math.sqrt(n); i++){
            if (n % i == 0){
             //   System.out.println("n % i = " + n + " " + i);
                // If the factor is duplicated, i.e. 10x10, then we only add it once
                if (n / i == 0) {
                    count++;
                }
                // otherwise we add both factors to the count
                else {
                    count = count+2;
                }
                System.out.println("n = " + n + " i = " + i + " Count = " + count);
            }
        }
        return count;
    }

}
